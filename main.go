package main

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	bot, err := tgbotapi.NewBotAPI("TOKEN")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil { // If we got a message
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
			switch strings.ToLower(update.Message.Text) {
			case "–ø—Ä–∏–≤–µ—Ç!", "–ø—Ä–∏–≤–µ—Ç", "ghbdtn", "–∫—É", "–¥–æ–±—Ä—ã–π", "–¥–æ—Ä–æ–≤–∫–∏", "–∑–¥–∞—Ä–æ–≤–∞", "–∑–¥—Ä–∞—Å—å—Ç–µ", "—Ö–∞–π", "–∫—É-–∫—É", "–ø—Ä–∏–≤–µ—Ç—É—Å–∏", "—Ö—ç–π", "–¥–æ—Ä–æ—É":
				msg.Text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"

				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}
			case "–∞–ø—Ç–µ–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞?":
				msg.Text = "–î–∞, –º—ã –≤–µ–¥—å —Ä–∞–±–æ—Ç–∞–µ–º 24/7"
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			case "–ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É":
				msg.Text = "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç"
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}
				photo := tgbotapi.FilePath("photo") // could be `FileBytes`, `FileID`, `FileURL`, etc

				photoRequest := tgbotapi.NewPhoto(update.Message.Chat.ID, photo)
				m, err := bot.Send(photoRequest)
				if err != nil {
					fmt.Printf("err: %s\n", err)
				}

				for _, msgWithPhoto := range m.Photo {
					// that ID could be reused (no need to send the same photo to a server:
					// it already stores it), could be useful to store it somewhere
					fmt.Printf("i uploaded a photo, got its ID:%s\n", msgWithPhoto.FileID)
				}

			case "/start":
				msg.Text = "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"
				msg.ReplyMarkup = defBoard
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			case "–Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ üíä":

				msg.Text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
				msg.ReplyMarkup = button
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			case "–Ω–∞–∑–∞–¥ üö´":
				msg.Text = "–ß—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–∫–∞–∂–µ—Ç–µ?"
				msg.ReplyMarkup = defBoard
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			case "–∑–∞–∫–∞–∑–∞—Ç—å":
				msg.Text = "–¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω"
				msg.ReplyMarkup = deepShopBoard
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			case "–¥–∞ üëç":
				msg.Text = "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –µ—â–µ –Ω–∞–¥–æ"
				msg.ReplyMarkup = button
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}
			case "–Ω–µ—Ç üëé":
				msg.Text = "–ü—Ä–∏—è—Ç–Ω—ã—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤"
				msg.ReplyMarkup = defBoard
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}

			default:
				drugs = update.Message.Text
				sbis()
				if answToClient == "" {
					answToClient = "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ"
				}
				msg.Text = answToClient
				_, err = bot.Send(msg)
				if err != nil {
					fmt.Printf("error: %s\n", err)
				}
				if answToClient != "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ" {
					msg.ReplyMarkup = deepShopBoard
				}
				answToClient = ""

			}
		}

	}
}
